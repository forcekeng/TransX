# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.dat to get more instructions.
# ===============================================================================

# [No.1] construct_wrapper.1
# In file train.py(26)/    def construct(self, pos_triple, neg_triple):/
funcgraph fg_1(
        %para1 : Tensor(I32)[512, 3]    # pos_triple
        , %para2 : Tensor(I32)[512, 3]    # neg_triple
        , %para3 : Ref[Tensor(F32)][14541, 50]    # entities_emb
        , %para4 : Ref[Tensor(F32)][237, 50]    # relations_emb
        , %para5 : Ref[Tensor(F32)][237, 50]    # w
        , %para6 : Ref[Tensor(F32)][1]    # beta1_power
        , %para7 : Ref[Tensor(F32)][1]    # beta2_power
        , %para8 : Ref[Tensor(F32)][14541, 50]    # moment1.entities_emb
        , %para9 : Ref[Tensor(F32)][237, 50]    # moment1.relations_emb
        , %para10 : Ref[Tensor(F32)][237, 50]    # moment1.w
        , %para11 : Ref[Tensor(F32)][14541, 50]    # moment2.entities_emb
        , %para12 : Ref[Tensor(F32)][237, 50]    # moment2.relations_emb
        , %para13 : Ref[Tensor(F32)][237, 50]    # moment2.w
        , %para14 : Ref[Tensor(F32)][14541, 50]    # vhat.entities_emb
        , %para15 : Ref[Tensor(F32)][237, 50]    # vhat.relations_emb
        , %para16 : Ref[Tensor(F32)][237, 50]    # vhat.w
        , %para17 : Ref[Tensor(F32)][]    # learning_rate
        , %para18 : Ref[Tensor(I32)][1]    # global_step
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_16(%para1, %para2)    #(Tensor(I32)[512, 3], Tensor(I32)[512, 3])    # fg_16=construct.16 #scope: Default
#[CNode]21
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file train.py(29)/        return loss, self.optimizer(grads)/#[CNode]22
}
# order:
#   1: construct_wrapper.1:[CNode]21{[0]: ValueNode<FuncGraph> construct.16, [1]: pos_triple, [2]: neg_triple}
#   2: construct_wrapper.1:[CNode]22{[0]: ValueNode<Primitive> Return, [1]: [CNode]21}


# [No.2] construct.16
# In file train.py(26)/    def construct(self, pos_triple, neg_triple):/
funcgraph fg_16[fg_1](
        %para19 : Tensor(I32)[512, 3]    # pos_triple
        , %para20 : Tensor(I32)[512, 3]    # neg_triple
    ) {

#------------------------> 1
    %1 = FuncGraph::fg_17(%para19, %para20)    #(Tensor(I32)[512, 3], Tensor(I32)[512, 3])    # fg_17=construct.17 #scope: Default
      # In file train.py(27)/        loss = self.network(pos_triple, neg_triple)/#loss
    %2 = UnpackGraphPrimitive::UnpackGraph{prim_type=1}(FuncGraph::fg_17, %para19, %para20)    #(Undefined, Tensor(I32)[512, 3], Tensor(I32)[512, 3])    # fg_17=construct.17 #scope: Default
      # In file train.py(28)/        grads = self.grad_op(self.network, self.weights)(pos_triple, neg_triple)/#grads
    %3 = Primitive::MakeTuple{prim_type=1}(%para3, %para4, %para5)    #(Ref[Tensor(F32)][14541, 50], Ref[Tensor(F32)][237, 50], Ref[Tensor(F32)][237, 50]) #scope: Default
      # In file train.py(28)/        grads = self.grad_op(self.network, self.weights)(pos_triple, neg_triple)/#[CNode]23
    %4 = DoSignaturePrimitive::S-Prim-grad{prim_type=1}(%2, %3)    #(Undefined, Undefined) #scope: Default
      # In file train.py(28)/        grads = self.grad_op(self.network, self.weights)(pos_triple, neg_triple)/#grads
    %5 = %4(%para19, %para20)    #(Tensor(I32)[512, 3], Tensor(I32)[512, 3]) #scope: Default
      # In file train.py(28)/        grads = self.grad_op(self.network, self.weights)(pos_triple, neg_triple)/#grads
    %6 = FuncGraph::fg_24(%5)    #(Undefined)    # fg_24=construct.24 #scope: Default
      # In file train.py(29)/        return loss, self.optimizer(grads)/#[CNode]25
    %7 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%1, %6)    #(Undefined, Undefined) #scope: Default
      # In file train.py(29)/        return loss, self.optimizer(grads)/#[CNode]26
    Primitive::Return{prim_type=1}(%7)    #(Undefined) #scope: Default
      # In file train.py(29)/        return loss, self.optimizer(grads)/#[CNode]27
}
# order:
#   1: construct.16:loss{[0]: ValueNode<FuncGraph> construct.17, [1]: pos_triple, [2]: neg_triple}
#   2: construct.16:grads{[0]: ValueNode<UnpackGraphPrimitive> UnpackGraph, [1]: ValueNode<FuncGraph> construct.17, [2]: pos_triple, [3]: neg_triple}
#   3: construct.16:grads{[0]: ValueNode<DoSignaturePrimitive> S-Prim-grad, [1]: grads, [2]: [CNode]23}
#   4: construct.16:grads{[0]: grads, [1]: pos_triple, [2]: neg_triple}
#   5: construct.16:[CNode]25{[0]: ValueNode<FuncGraph> construct.24, [1]: grads}
#   6: construct.16:[CNode]26{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: loss, [2]: [CNode]25}
#   7: construct.16:[CNode]27{[0]: ValueNode<Primitive> Return, [1]: [CNode]26}


# [No.3] construct.17
# In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(29)/    def construct(self, pos_triple, neg_triple):/
funcgraph fg_17[fg_1](
        %para21 : Tensor(I32)[512, 3]    # pos_triple
        , %para22 : Tensor(I32)[512, 3]    # neg_triple
    ) {

#------------------------> 2
    %1 = FuncGraph::fg_18(%para21)    #(Tensor(I32)[512, 3])    # fg_18=embed.18 #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(35)/        pos_head, pos_relation, pos_tail = self.embed(pos_triple) # shape = (batch_size, n_dim)/#[CNode]28
    %2 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%1, I64(0))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(35)/        pos_head, pos_relation, pos_tail = self.embed(pos_triple) # shape = (batch_size, n_dim)/#pos_head
    %3 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%1, I64(1))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(35)/        pos_head, pos_relation, pos_tail = self.embed(pos_triple) # shape = (batch_size, n_dim)/#pos_relation
    %4 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%1, I64(2))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(35)/        pos_head, pos_relation, pos_tail = self.embed(pos_triple) # shape = (batch_size, n_dim)/#pos_tail
    %5 = FuncGraph::fg_29(%2, %3, %4, I64(1))    #(Undefined, Undefined, Undefined, Undefined)    # fg_29=get_distance.29 #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(39)/        pos_distance = self.get_distance(pos_head, pos_relation, pos_tail, self.norm) # shape = (batch_size)/#pos_distance
    %6 = FuncGraph::fg_18(%para22)    #(Tensor(I32)[512, 3])    # fg_18=embed.18 #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(36)/        neg_head, neg_relation, neg_tail = self.embed(neg_triple)/#[CNode]30
    %7 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%6, I64(0))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(36)/        neg_head, neg_relation, neg_tail = self.embed(neg_triple)/#neg_head
    %8 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%6, I64(1))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(36)/        neg_head, neg_relation, neg_tail = self.embed(neg_triple)/#neg_relation
    %9 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%6, I64(2))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(36)/        neg_head, neg_relation, neg_tail = self.embed(neg_triple)/#neg_tail
    %10 = FuncGraph::fg_29(%7, %8, %9, I64(1))    #(Undefined, Undefined, Undefined, Undefined)    # fg_29=get_distance.29 #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(40)/        neg_distance = self.get_distance(neg_head, neg_relation, neg_tail, self.norm)/#neg_distance
    %11 = DoSignaturePrimitive::S-Prim-sub{prim_type=1}(%5, %10)    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(43)/        loss = ops.maximum(0, pos_distance - neg_distance + self.margin).sum() # 所有损失求和/#[CNode]31
    %12 = DoSignaturePrimitive::S-Prim-add{prim_type=1}(%11, F32(1))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(43)/        loss = ops.maximum(0, pos_distance - neg_distance + self.margin).sum() # 所有损失求和/#[CNode]32
    %13 = FuncGraph::fg_33(I64(0), %12)    #(Undefined, Undefined)    # fg_33=maximum.33 #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(43)/        loss = ops.maximum(0, pos_distance - neg_distance + self.margin).sum() # 所有损失求和/#[CNode]34
    %14 = Primitive::getattr{prim_type=1}(%13, "sum")    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(43)/        loss = ops.maximum(0, pos_distance - neg_distance + self.margin).sum() # 所有损失求和/#[CNode]35
    %15 = %14() #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(43)/        loss = ops.maximum(0, pos_distance - neg_distance + self.margin).sum() # 所有损失求和/#loss
    Primitive::Return{prim_type=1}(%15)    #(Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(44)/        return loss/#[CNode]36
}
# order:
#   1: construct.17:[CNode]28{[0]: ValueNode<FuncGraph> embed.18, [1]: pos_triple}
#   2: construct.17:pos_head{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]28, [2]: ValueNode<Int64Imm> 0}
#   3: construct.17:pos_relation{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]28, [2]: ValueNode<Int64Imm> 1}
#   4: construct.17:pos_tail{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]28, [2]: ValueNode<Int64Imm> 2}
#   5: construct.17:[CNode]30{[0]: ValueNode<FuncGraph> embed.18, [1]: neg_triple}
#   6: construct.17:neg_head{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]30, [2]: ValueNode<Int64Imm> 0}
#   7: construct.17:neg_relation{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]30, [2]: ValueNode<Int64Imm> 1}
#   8: construct.17:neg_tail{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]30, [2]: ValueNode<Int64Imm> 2}
#   9: construct.17:pos_distance{[0]: ValueNode<FuncGraph> get_distance.29, [1]: pos_head, [2]: pos_relation, [3]: pos_tail, [4]: ValueNode<Int64Imm> 1}
#  10: construct.17:neg_distance{[0]: ValueNode<FuncGraph> get_distance.29, [1]: neg_head, [2]: neg_relation, [3]: neg_tail, [4]: ValueNode<Int64Imm> 1}
#  11: construct.17:[CNode]31{[0]: ValueNode<DoSignaturePrimitive> S-Prim-sub, [1]: pos_distance, [2]: neg_distance}
#  12: construct.17:[CNode]32{[0]: ValueNode<DoSignaturePrimitive> S-Prim-add, [1]: [CNode]31, [2]: ValueNode<FP32Imm> 1.000000}
#  13: construct.17:[CNode]34{[0]: ValueNode<FuncGraph> maximum.33, [1]: ValueNode<Int64Imm> 0, [2]: [CNode]32}
#  14: construct.17:[CNode]35{[0]: ValueNode<Primitive> getattr, [1]: [CNode]34, [2]: ValueNode<StringImm> sum}
#  15: construct.17:loss{[0]: [CNode]35}
#  16: construct.17:[CNode]36{[0]: ValueNode<Primitive> Return, [1]: loss}


# [No.4] embed.18
# In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(46)/    def embed(self, triple):/
funcgraph fg_18[fg_1](
        %para23 : Tensor(I32)[512, 3]    # triple
    ) {
    %1 : Slice[None : None : None] = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(None, None, None)    #(NoneType, NoneType, NoneType) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(48)/        head = self.entities_emb[triple[:, 0]]/#[CNode]37
    %2 : Tuple[Slice[None : None : None],I64] = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%1, I64(0))    #(Slice[None : None : None], I64) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(48)/        head = self.entities_emb[triple[:, 0]]/#[CNode]38
    %3 : Tensor(I32)[512] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%para23, %2)    #(Tensor(I32)[512, 3], Tuple[Slice[None : None : None],I64]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(48)/        head = self.entities_emb[triple[:, 0]]/#[CNode]39
    %4 : Tensor(F32)[512, 50] = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%para3, %3)    #(Ref[Tensor(F32)][14541, 50], Tensor(I32)[512]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(48)/        head = self.entities_emb[triple[:, 0]]/#head
    %5 : Tensor(F32)[512, 50] = DoSignaturePrimitive::S-Prim-L2Normalize{prim_type=1}[axis=[I64(-1)], epsilon=F32(0.0001)](%4)    #(Tensor(F32)[512, 50]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(53)/        head = self.normalizer(head)/#head

#------------------------> 3
    %6 = FuncGraph::fg_19(%5, %para5)    #(Tensor(F32)[512, 50], Ref[Tensor(F32)][237, 50])    # fg_19=_projection.19 #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(58)/        head = self._projection(head, self.w)/#head
    %7 = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(None, None, None)    #(Undefined, Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(49)/        relation = self.relations_emb[triple[:, 1]]/#[CNode]40
    %8 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%7, I64(1))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(49)/        relation = self.relations_emb[triple[:, 1]]/#[CNode]41
    %9 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%para23, %8)    #(Tensor(I32)[512, 3], Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(49)/        relation = self.relations_emb[triple[:, 1]]/#[CNode]42
    %10 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%para4, %9)    #(Ref[Tensor(F32)][237, 50], Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(49)/        relation = self.relations_emb[triple[:, 1]]/#relation
    %11 = DoSignaturePrimitive::S-Prim-L2Normalize{prim_type=1}[axis=[I64(-1)], epsilon=F32(0.0001)](%10)    #(Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(54)/        relation = self.normalizer(relation)/#relation
    %12 = DoSignaturePrimitive::S-Prim-make_slice{prim_type=1}(None, None, None)    #(Undefined, Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(50)/        tail = self.entities_emb[triple[:, 2]]/#[CNode]43
    %13 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%12, I64(2))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(50)/        tail = self.entities_emb[triple[:, 2]]/#[CNode]44
    %14 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%para23, %13)    #(Tensor(I32)[512, 3], Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(50)/        tail = self.entities_emb[triple[:, 2]]/#[CNode]45
    %15 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%para3, %14)    #(Ref[Tensor(F32)][14541, 50], Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(50)/        tail = self.entities_emb[triple[:, 2]]/#tail
    %16 = DoSignaturePrimitive::S-Prim-L2Normalize{prim_type=1}[axis=[I64(-1)], epsilon=F32(0.0001)](%15)    #(Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(55)/        tail = self.normalizer(tail)/#tail
    %17 = FuncGraph::fg_19(%16, %para5)    #(Undefined, Ref[Tensor(F32)][237, 50])    # fg_19=_projection.19 #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(59)/        tail = self._projection(tail, self.w)/#tail
    %18 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%6, %11, %17)    #(Undefined, Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(61)/        return head, relation, tail /#[CNode]46
    Primitive::Return{prim_type=1}(%18)    #(Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(61)/        return head, relation, tail /#[CNode]47
}
# order:
#   1: embed.18:[CNode]37{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<None> None, [2]: ValueNode<None> None, [3]: ValueNode<None> None}
#   2: embed.18:[CNode]38{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]37, [2]: ValueNode<Int64Imm> 0}
#   3: embed.18:[CNode]39{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: triple, [2]: [CNode]38}
#   4: embed.18:head{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: entities_emb, [2]: [CNode]39}
#   5: embed.18:[CNode]40{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<None> None, [2]: ValueNode<None> None, [3]: ValueNode<None> None}
#   6: embed.18:[CNode]41{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]40, [2]: ValueNode<Int64Imm> 1}
#   7: embed.18:[CNode]42{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: triple, [2]: [CNode]41}
#   8: embed.18:relation{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: relations_emb, [2]: [CNode]42}
#   9: embed.18:[CNode]43{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_slice, [1]: ValueNode<None> None, [2]: ValueNode<None> None, [3]: ValueNode<None> None}
#  10: embed.18:[CNode]44{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]43, [2]: ValueNode<Int64Imm> 2}
#  11: embed.18:[CNode]45{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: triple, [2]: [CNode]44}
#  12: embed.18:tail{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: entities_emb, [2]: [CNode]45}
#  13: embed.18:head{[0]: ValueNode<DoSignaturePrimitive> S-Prim-L2Normalize, [1]: head}
#  14: embed.18:relation{[0]: ValueNode<DoSignaturePrimitive> S-Prim-L2Normalize, [1]: relation}
#  15: embed.18:tail{[0]: ValueNode<DoSignaturePrimitive> S-Prim-L2Normalize, [1]: tail}
#  16: embed.18:head{[0]: ValueNode<FuncGraph> _projection.19, [1]: head, [2]: w}
#  17: embed.18:tail{[0]: ValueNode<FuncGraph> _projection.19, [1]: tail, [2]: w}
#  18: embed.18:[CNode]46{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: head, [2]: relation, [3]: tail}
#  19: embed.18:[CNode]47{[0]: ValueNode<Primitive> Return, [1]: [CNode]46}


# [No.5] _projection.19
# In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(75)/    def _projection(self, entity_emb, proj_vec):/
funcgraph fg_19(
        %para24 : Tensor(F32)[512, 50]    # entity_emb
        , %para25 : Ref[Tensor(F32)][237, 50]    # proj_vec
    ) {
    %1 : Tuple[I64*2] = Primitive::getattr{prim_type=1}(%para24, "shape")    #(Tensor(F32)[512, 50], String) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(79)/        print(entity_emb.shape)/#[CNode]48
    %2 : Tensor(I32)[1] = DoSignaturePrimitive::S-Prim-Print{prim_type=1}[side_effect_io=Bool(1)](%1)    #(Tuple[I64*2]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(79)/        print(entity_emb.shape)/#[CNode]49
    %3 : Tensor(F32)[237, 50] = DoSignaturePrimitive::S-Prim-L2Normalize{prim_type=1}[axis=[I64(-1)], epsilon=F32(0.0001)](%para25)    #(Ref[Tensor(F32)][237, 50]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(78)/        proj_vec = self.normalizer(proj_vec)/#proj_vec
    %4 : Tuple[I64*2] = Primitive::getattr{prim_type=1}(%3, "shape")    #(Tensor(F32)[237, 50], String) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(80)/        print(proj_vec.shape)/#[CNode]50
    %5 : Tensor(I32)[1] = DoSignaturePrimitive::S-Prim-Print{prim_type=1}[side_effect_io=Bool(1)](%4)    #(Tuple[I64*2]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(80)/        print(proj_vec.shape)/#[CNode]51
    %6 : Tuple[Tensor(I32)*2] = Primitive::MakeTuple{prim_type=1}(%2, %5)    #(Tensor(I32)[1], Tensor(I32)[1]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(58)/        head = self._projection(head, self.w)/#[CNode]52
    %7 : Tuple[Tensor(I32)*2] = Primitive::stop_gradient{prim_type=1}(%6)    #(Tuple[Tensor(I32)*2]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(58)/        head = self._projection(head, self.w)/#[CNode]53

#------------------------> 4
    %8 = FuncGraph::fg_54(%para24, %3)    #(Tensor(F32)[512, 50], Tensor(F32)[237, 50])    # fg_54=batch_dot.54 #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]55
    %9 = DoSignaturePrimitive::S-Prim-mul{prim_type=1}(%8, %3)    #(Undefined, Tensor(F32)[237, 50]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]56
    %10 = DoSignaturePrimitive::S-Prim-sub{prim_type=1}(%para24, %9)    #(Tensor(F32)[512, 50], Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]57
    %11 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%10, %7)    #(Undefined, Tuple[Tensor(I32)*2]) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(58)/        head = self._projection(head, self.w)/#[CNode]58
    Primitive::Return{prim_type=1}(%11)    #(Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]59
}
# order:
#   1: _projection.19:proj_vec{[0]: ValueNode<DoSignaturePrimitive> S-Prim-L2Normalize, [1]: proj_vec}
#   2: _projection.19:[CNode]48{[0]: ValueNode<Primitive> getattr, [1]: entity_emb, [2]: ValueNode<StringImm> shape}
#   3: _projection.19:[CNode]49{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Print, [1]: [CNode]48}
#   4: _projection.19:[CNode]50{[0]: ValueNode<Primitive> getattr, [1]: proj_vec, [2]: ValueNode<StringImm> shape}
#   5: _projection.19:[CNode]51{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Print, [1]: [CNode]50}
#   6: _projection.19:[CNode]55{[0]: ValueNode<FuncGraph> batch_dot.54, [1]: entity_emb, [2]: proj_vec}
#   7: _projection.19:[CNode]56{[0]: ValueNode<DoSignaturePrimitive> S-Prim-mul, [1]: [CNode]55, [2]: proj_vec}
#   8: _projection.19:[CNode]57{[0]: ValueNode<DoSignaturePrimitive> S-Prim-sub, [1]: entity_emb, [2]: [CNode]56}
#   9: _projection.19:[CNode]59{[0]: ValueNode<Primitive> Return, [1]: [CNode]58}


# [No.6] batch_dot.20
# In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(545)/def batch_dot(x1, x2, axes=None):/
funcgraph fg_20(
        %para26 : Tensor(F32)[512, 50]    # x1
        , %para27 : Tensor(F32)[237, 50]    # Φx2
    ) {
    %1 : TypeType = DoSignaturePrimitive::S-Prim-DType{prim_type=1}(%para26)    #(Tensor(F32)[512, 50]) #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(624)/    x1_type = F.dtype(x1)/#x1_type
    %2 : TypeType = DoSignaturePrimitive::S-Prim-DType{prim_type=1}(%para27)    #(Tensor(F32)[237, 50]) #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(625)/    x2_type = F.dtype(x2)/#x2_type
    %3 : NoneType = DoSignaturePrimitive::S-Prim-_typecheck_input_batch_dot{prim_type=1}(%1, %2, "batch_dot")    #(TypeType, TypeType, String) #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(629)/    _typecheck_input_batch_dot(x1_type, x2_type, 'batch_dot')/#[CNode]60
    %4 : Tuple[I64*2] = FuncGraph::fg_61(%para26)    #(Tensor(F32)[512, 50])    # fg_61=shape.61 #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(620)/    x1_shape = F.shape(x1)/#x1_shape
    %5 : Tuple[I64*2] = FuncGraph::fg_61(%para27)    #(Tensor(F32)[237, 50])    # fg_61=shape.61 #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(621)/    x2_shape = F.shape(x2)/#x2_shape
    %6 : Tuple[I64*2] = DoSignaturePrimitive::S-Prim-_get_batch_size{prim_type=1}(%4, %5, "batch_dot")    #(Tuple[I64*2], Tuple[I64*2], String) #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(627)/    x1_batch_size, x2_batch_size = _get_batch_size(x1_shape, x2_shape, 'batch_dot')/#[CNode]62
    %7 : I64 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%6, I64(0))    #(Tuple[I64*2], I64) #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(644)/    output_shape = _get_output_shape(x1_batch_size, x1_ret, x2_ret)/#Φx1_batch_size
    %8 : I64 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%6, I64(1))    #(Tuple[I64*2], I64) #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(627)/    x1_batch_size, x2_batch_size = _get_batch_size(x1_shape, x2_shape, 'batch_dot')/#x2_batch_size

#------------------------> 5
    %9 = DoSignaturePrimitive::S-Prim-_check_batch_size{prim_type=1}(%7, %8, "batch_dot")    #(I64, I64, String) #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(630)/    _check_batch_size(x1_batch_size, x2_batch_size, 'batch_dot')/#[CNode]63
    %10 = Primitive::MakeTuple{prim_type=1}(%3, %9)    #(NoneType, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]64
    %11 = Primitive::stop_gradient{prim_type=1}(%10)    #(Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]65
    %12 = FuncGraph::fg_66(%4)    #(Tuple[I64*2])    # fg_66=ms_len.66 #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(657)/    if x1_dim_num == 2:/#Φx1_dim_num
    %13 = DoSignaturePrimitive::S-Prim-equal{prim_type=1}(%12, I64(2))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(633)/    if x1_dim_num == 2:/#[CNode]67
    %14 = FuncGraph::fg_68(%13)    #(Undefined)    # fg_68=bool_.68 #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(633)/    if x1_dim_num == 2:/#[CNode]69
    %15 = Primitive::Switch{prim_type=1}(%14, FuncGraph::fg_70, FuncGraph::fg_71)    #(Undefined, Undefined, Undefined)    # fg_70=✓batch_dot.70, fg_71=✗batch_dot.71 #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(633)/    if x1_dim_num == 2:/#[CNode]72
    %16 = %15() #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(633)/    if x1_dim_num == 2:/#[CNode]73
    %17 = Primitive::TupleGetItem{prim_type=1}(%16, I64(0))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]74
    %18 = Primitive::TupleGetItem{prim_type=1}(%16, I64(1))    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]75
    %19 = FuncGraph::fg_76(%17, %18)    #(Undefined, Undefined)    # fg_76=↓batch_dot.76 #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]77
    %20 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%19, %11)    #(Undefined, Undefined) #scope: Default/network-TransH
      # In file E:\comptition\maoshenAI\mycode\transx\official\transx\src\transH.py(81)/        return entity_emb - ops.batch_dot(entity_emb, proj_vec) * proj_vec/#[CNode]78
    Primitive::Return{prim_type=1}(%20)    #(Undefined) #scope: Default/network-TransH
      # In file E:\software\pyMindSpore\lib\site-packages\mindspore\ops\composite\math_ops.py(633)/    if x1_dim_num == 2:/#[CNode]79
}
# order:
#   1: batch_dot.20:Φtranspose_op{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.array_ops.Transpose'}
#   2: batch_dot.20:Φbatch_matmul_op{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.math_ops.BatchMatMul'}
#   3: batch_dot.20:Φsqueeze_one_op{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.array_ops.Squeeze', [1]: ValueNode<Int64Imm> 1}
#   4: batch_dot.20:[CNode]80{[0]: ValueNode<DoSignaturePrimitive> S-Prim-negative, [1]: ValueNode<Int64Imm> 1}
#   5: batch_dot.20:Φsqueeze_minus_one_op{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.array_ops.Squeeze', [1]: [CNode]80}
#   6: batch_dot.20:x1_shape{[0]: ValueNode<FuncGraph> shape.61, [1]: x1}
#   7: batch_dot.20:x2_shape{[0]: ValueNode<FuncGraph> shape.61, [1]: Φx2}
#   8: batch_dot.20:Φx1_dim_num{[0]: ValueNode<FuncGraph> ms_len.66, [1]: x1_shape}
#   9: batch_dot.20:Φx2_dim_num{[0]: ValueNode<FuncGraph> ms_len.66, [1]: x2_shape}
#  10: batch_dot.20:x1_type{[0]: ValueNode<DoSignaturePrimitive> S-Prim-DType, [1]: x1}
#  11: batch_dot.20:x2_type{[0]: ValueNode<DoSignaturePrimitive> S-Prim-DType, [1]: Φx2}
#  12: batch_dot.20:[CNode]62{[0]: ValueNode<DoSignaturePrimitive> S-Prim-_get_batch_size, [1]: x1_shape, [2]: x2_shape, [3]: ValueNode<StringImm> batch_dot}
#  13: batch_dot.20:Φx1_batch_size{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]62, [2]: ValueNode<Int64Imm> 0}
#  14: batch_dot.20:x2_batch_size{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]62, [2]: ValueNode<Int64Imm> 1}
#  15: batch_dot.20:[CNode]60{[0]: ValueNode<DoSignaturePrimitive> S-Prim-_typecheck_input_batch_dot, [1]: x1_type, [2]: x2_type, [3]: ValueNode<StringImm> batch_dot}
#  16: batch_dot.20:[CNode]63{[0]: ValueNode<DoSignaturePrimitive> S-Prim-_check_batch_size, [1]: Φx1_batch_size, [2]: x2_batch_size, [3]: ValueNode<StringImm> batch_dot}
#  17: batch_dot.20:axes{[0]: ValueNode<DoSignaturePrimitive> S-Prim-_check_axes_for_batch_dot, [1]: x1_shape, [2]: x2_shape, [3]: ValueNode<None> None, [4]: ValueNode<StringImm> batch_dot}
#  18: batch_dot.20:[CNode]67{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: Φx1_dim_num, [2]: ValueNode<Int64Imm> 2}
#  19: batch_dot.20:[CNode]69{[0]: ValueNode<FuncGraph> bool_.68, [1]: [CNode]67}
#  20: batch_dot.20:[CNode]72{[0]: ValueNode<Primitive> Switch, [1]: [CNode]69, [2]: ValueNode<FuncGraph> ✓batch_dot.70, [3]: ValueNode<FuncGraph> ✗batch_dot.71}
#  21: batch_dot.20:[CNode]73{[0]: [CNode]72}
#  22: batch_dot.20:[CNode]77{[0]: ValueNode<FuncGraph> ↓batch_dot.76, [1]: [CNode]74, [2]: [CNode]75}
#  23: batch_dot.20:[CNode]78{[0]: ValueNode<Primitive> Depend, [1]: [CNode]77, [2]: [CNode]65}
#  24: batch_dot.20:[CNode]79{[0]: ValueNode<Primitive> Return, [1]: [CNode]78}
#  25: batch_dot.20:[CNode]74{[0]: ValueNode<Primitive> TupleGetItem, [1]: [CNode]73, [2]: ValueNode<Int64Imm> 0}
#  26: batch_dot.20:[CNode]75{[0]: ValueNode<Primitive> TupleGetItem, [1]: [CNode]73, [2]: ValueNode<Int64Imm> 1}


#===============================================================================
# num of function graphs in stack: 6/7 (Ignored 1 internal frames).
